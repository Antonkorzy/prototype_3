@model prototype_2.acts

@{
    ViewBag.Title = "Подробнее";
}

<h2>Информация об акте</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayName("Номер акта")
        </dt>

        <dd>
            @Html.DisplayFor(model => model.number)
        </dd>

        <dt>
            @Html.DisplayName("Дата")
        </dt>

        <dd>
            @Html.DisplayFor(model => model.date)
        </dd>

        <dt>
            @Html.DisplayName("Тип/название")
        </dt>

        <dd>
            @Html.DisplayFor(model => model.name)
        </dd>

        <dt>
        @Html.DisplayName("Местоположение")
        </dt>

        <script src="http://maps.google.com/maps/api/js?key=AIzaSyDl88UOjXvLXTeRE7l1LYhVpWvsADhCOrM" type="text/javascript"></script>


        <style>
            #map_canvas img {
                max-width: none;
            }
        </style>

        <!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
        <style>
            .infoDiv {
                height: 200px;
                width: 300px;
                -webkit-user-select: none;
                background-color: white;
            }
        </style>
        <br />
        <!-- This is the div that will contain the Google Map -->
        <dd><div id="map_canvas" style="height: 300px; width: 800px"></div></dd>

        <!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
        @section scripts {
            <section class="scripts">

                <script type="text/javascript">

    @*<!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->*@
    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Start_Country = new google.maps.LatLng(55.7535482, 37.619985); // карта центрируется на эту точку

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 8,
            center: Start_Country,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // a sample list of JSON encoded data of places to visit in Tunisia
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
        var data = [
                  { "Id": 1, "PlaceName": "Красная площадь, центр Москвы", "GeoLong": "55.7535482", "GeoLat": "37.619985" },// здесь можно задавать любые координаты местности
                  { "Id": 2, "PlaceName": "ТУНИС)", "GeoLong": "36.4", "GeoLat": "10.616667" }
               //   { "Id": 3, "PlaceName": "Sousse", "GeoLong": "35.8329809", "GeoLat": "10.63875" },
               //   { "Id": 4, "PlaceName": "Sfax", "GeoLong": "34.745159", "GeoLat": "10.7613" }
               ];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.PlaceName + "</div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }


                </script>
            </section>
        }

        @*<dt>
            @Html.DisplayNameFor(model => model.location)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.location)
        </dd>*@

        <dt>
            @Html.DisplayName("Координаты расположения")
        </dt>

        <dd>
           55.7535482° , 37.619985°
        </dd>

        @*<dt>
            @Html.DisplayNameFor(model => model.photo)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.photo)
        </dd>*@
        <dt>
            @Html.Label("Фото")
        </dt>
        <dd class="display-field">
            <img src="@Url.Action("ViewPhoto", "acts", new { id=Model.act_id})" width="250" height="250" />
        </dd>

        <dt>
            @Html.DisplayName("Дополнительная информация")
        </dt>

        <dd>
            @Html.DisplayFor(model => model.extra_info)
        </dd>

        <dt>
            @Html.DisplayName("Ответственное лицо")
        </dt>

        <dd>
            @Html.DisplayFor(model => model.users.name)
        </dd>

        @*<dt>
            @Html.Label("Сгенерировать документ")
        </dt>*@
        @*<dd>
            <input type="submit" value="Сгенерировать документ" class="btn btn-default" /> 
            @Html.DisplayFor(model => model.doc)
        </dd>*@

        <p>
            @Html.ActionLink("Экспорт в Word", "ExportToWord", new { id = Model.act_id})
        </p>

    </dl>
</div>
<p>
    @Html.ActionLink("Внести изменения", "Edit", new { id = Model.act_id }) |
    @Html.ActionLink("Назад к списку", "Index")
</p>
